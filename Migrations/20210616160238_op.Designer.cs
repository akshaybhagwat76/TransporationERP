// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransportationERP.dal.Model;

namespace TransportationERP.Migrations
{
    [DbContext(typeof(MMS_WebContext))]
    [Migration("20210616160238_op")]
    partial class op
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TransportationERP.DAL.Model.TransectionSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommodityID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransectionSetting");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<bool?>("IncludeTransportation")
                        .HasColumnType("bit")
                        .HasColumnName("Include_Transportation");

                    b.Property<string>("Representative")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.TransactionDetail", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<int?>("DetailId")
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<int?>("Gross")
                        .HasColumnType("int");

                    b.Property<int?>("Net")
                        .HasColumnType("int");

                    b.Property<int?>("Tare")
                        .HasColumnType("int");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength(true);

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("money");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("money");

                    b.ToTable("Transaction_Detail");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.TransactionHeader", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<string>("CarrierTicket")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength(true);

                    b.Property<string>("PaymentReceiptUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("PaymentReceiptURL");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SupplierTicket")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("TicketDate")
                        .HasColumnType("date");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength(true);

                    b.Property<string>("TruckDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Transaction_Header");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.TransactionOtherPicture", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<string>("FullResUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FullRes_URL");

                    b.Property<string>("PictureId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PictureID");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Thumbnail_URL");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength(true);

                    b.ToTable("Transaction_OtherPictures");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.TransactionReceivedPaperword", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<string>("FullResUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FullRes_URL");

                    b.Property<string>("PictureId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PictureID");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Thumbnail_URL");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength(true);

                    b.ToTable("Transaction_ReceivedPaperword");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.TransactionScalePicture", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<string>("FullResUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("FullRes_URL");

                    b.Property<string>("PictureId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PictureID");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("Thumbnail_URL");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength(true);

                    b.ToTable("Transaction_ScalePictures");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.TransportationCommodity", b =>
                {
                    b.Property<string>("AccountID")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<int>("CommodityID")
                        .HasColumnType("int")
                        .HasColumnName("CommodityID");

                    b.Property<string>("Commodity_Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Commodity_Name");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.ToTable("Transportation_Commodities");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.TransportationLocation", b =>
                {
                    b.Property<string>("AccountID")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<int>("LocationID")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("LocationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Transportation_Locations");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<bool?>("AccountDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("Account_Disabled");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("AccountID")
                        .IsFixedLength(true);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(64)
                        .HasColumnType("binary(64)")
                        .IsFixedLength(true);

                    b.Property<int?>("PasswordVersion")
                        .HasColumnType("int")
                        .HasColumnName("Password_Version");

                    b.Property<string>("Salt")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TransportationERP.dal.Model.UserHistory", b =>
                {
                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("EventType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ip")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .HasColumnName("IP")
                        .IsFixedLength(true);

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.ToTable("User_History");
                });
#pragma warning restore 612, 618
        }
    }
}
